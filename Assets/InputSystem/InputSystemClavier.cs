//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/InputSystemClavier.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystemClavier: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystemClavier()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystemClavier"",
    ""maps"": [
        {
            ""name"": ""Control"",
            ""id"": ""2b0d9850-97b8-4e4f-8d31-5d4a3ff669db"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e5b0a2ee-5fbb-481e-acd6-fd31567773fd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchCardLeft"",
                    ""type"": ""Button"",
                    ""id"": ""39e2f03c-c6e8-4b0d-a9ab-aaae7dbfc22c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchCardRight"",
                    ""type"": ""Button"",
                    ""id"": ""ab9ee107-9302-4d7a-9d7f-5b4413256b66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Invoque"",
                    ""type"": ""Button"",
                    ""id"": ""71729bdf-37b3-460b-ba15-c2936e54c7eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""e377c84e-3ae8-4031-92af-b8f7b6c35c9a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4f828b80-210b-4435-802e-27f54e9b905e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8f8912bd-adb1-4905-a04f-3860a232a183"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""09c72a6b-ba6e-458f-94ad-a8de1d6ead13"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1cf1e555-91fb-4219-999b-1ccf5a88b777"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cf2c3f2e-148b-4c0d-ae13-645817fd05da"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchCardLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcd760d5-1a68-4105-a1b2-5427f465a301"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchCardRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8fe39a3-3025-4c02-8a39-af43ab612f74"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Invoque"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Control
        m_Control = asset.FindActionMap("Control", throwIfNotFound: true);
        m_Control_Move = m_Control.FindAction("Move", throwIfNotFound: true);
        m_Control_SwitchCardLeft = m_Control.FindAction("SwitchCardLeft", throwIfNotFound: true);
        m_Control_SwitchCardRight = m_Control.FindAction("SwitchCardRight", throwIfNotFound: true);
        m_Control_Invoque = m_Control.FindAction("Invoque", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Control
    private readonly InputActionMap m_Control;
    private List<IControlActions> m_ControlActionsCallbackInterfaces = new List<IControlActions>();
    private readonly InputAction m_Control_Move;
    private readonly InputAction m_Control_SwitchCardLeft;
    private readonly InputAction m_Control_SwitchCardRight;
    private readonly InputAction m_Control_Invoque;
    public struct ControlActions
    {
        private @InputSystemClavier m_Wrapper;
        public ControlActions(@InputSystemClavier wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Control_Move;
        public InputAction @SwitchCardLeft => m_Wrapper.m_Control_SwitchCardLeft;
        public InputAction @SwitchCardRight => m_Wrapper.m_Control_SwitchCardRight;
        public InputAction @Invoque => m_Wrapper.m_Control_Invoque;
        public InputActionMap Get() { return m_Wrapper.m_Control; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlActions set) { return set.Get(); }
        public void AddCallbacks(IControlActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @SwitchCardLeft.started += instance.OnSwitchCardLeft;
            @SwitchCardLeft.performed += instance.OnSwitchCardLeft;
            @SwitchCardLeft.canceled += instance.OnSwitchCardLeft;
            @SwitchCardRight.started += instance.OnSwitchCardRight;
            @SwitchCardRight.performed += instance.OnSwitchCardRight;
            @SwitchCardRight.canceled += instance.OnSwitchCardRight;
            @Invoque.started += instance.OnInvoque;
            @Invoque.performed += instance.OnInvoque;
            @Invoque.canceled += instance.OnInvoque;
        }

        private void UnregisterCallbacks(IControlActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @SwitchCardLeft.started -= instance.OnSwitchCardLeft;
            @SwitchCardLeft.performed -= instance.OnSwitchCardLeft;
            @SwitchCardLeft.canceled -= instance.OnSwitchCardLeft;
            @SwitchCardRight.started -= instance.OnSwitchCardRight;
            @SwitchCardRight.performed -= instance.OnSwitchCardRight;
            @SwitchCardRight.canceled -= instance.OnSwitchCardRight;
            @Invoque.started -= instance.OnInvoque;
            @Invoque.performed -= instance.OnInvoque;
            @Invoque.canceled -= instance.OnInvoque;
        }

        public void RemoveCallbacks(IControlActions instance)
        {
            if (m_Wrapper.m_ControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlActions @Control => new ControlActions(this);
    public interface IControlActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSwitchCardLeft(InputAction.CallbackContext context);
        void OnSwitchCardRight(InputAction.CallbackContext context);
        void OnInvoque(InputAction.CallbackContext context);
    }
}
